contract IdentityVerifier {
  storage:
    owner: address;
    known_hashes: map<field, bool>;

  constructor() {
    owner = caller();  // Save the deployer's wallet address
    // You can pre-register any hash you want here (optional)
    known_hashes[hash(field("refugee001"))] = true;
  }

  // âœ… PUBLIC: Anyone can register their identity
  public function register_identity(user_id: field) {
    let hash_id = hash(user_id);
    known_hashes[hash_id] = true;
  }

  // âœ… ZK Proof Verification
  public function verify_proof(public_hash: field, zk_proof: zkproof) -> bool {
    require(verify_identity_proof(zk_proof, public_hash), "Invalid proof");
    return known_hashes[public_hash];
  }

  // ðŸ§¾ View the contract owner's address
  public function get_owner() -> address {
    return owner;
  }

  // ðŸ§  Check if a hash is registered
  public function is_known(hash_val: field) -> bool {
    return known_hashes[hash_val];
  }
}
